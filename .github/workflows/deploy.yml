name: Build, Test, and Deploy

permissions:
  contents: read

on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request_target:
    branches: [main]
    paths:
      - "frontend/**"
      - "terraform/**"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  TERRAFORM_VERSION: "1.10.5"

jobs:
  detect-changes:
    name: Detect Meaningful Changes
    runs-on: ubuntu-latest
    outputs:
      has-meaningful-changes: >
        ${{ steps.changes.outputs.has-meaningful-changes }}
      has-frontend-changes: ${{ steps.changes.outputs.has-frontend-changes }}
      has-terraform-changes: ${{ steps.changes.outputs.has-terraform-changes }}
      has-workflow-changes: ${{ steps.changes.outputs.has-workflow-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # For pull requests, compare against the base branch
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For pushes, compare against the previous commit
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "Comparing changes from $BASE_SHA to $HEAD_SHA"

          # Check for changes in meaningful directories
          FRONTEND_CHANGES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | \
            grep -E "^frontend/" || echo "")
          TERRAFORM_CHANGES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | \
            grep -E "^terraform/" || echo "")
          WORKFLOW_CHANGES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | \
            grep -E "^\.github/workflows/" || echo "")

          # Set outputs
          if [ -n "$FRONTEND_CHANGES" ]; then
            echo "has-frontend-changes=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected:"
            echo "$FRONTEND_CHANGES"
          else
            echo "has-frontend-changes=false" >> $GITHUB_OUTPUT
          fi

          if [ -n "$TERRAFORM_CHANGES" ]; then
            echo "has-terraform-changes=true" >> $GITHUB_OUTPUT
            echo "Terraform changes detected:"
            echo "$TERRAFORM_CHANGES"
          else
            echo "has-terraform-changes=false" >> $GITHUB_OUTPUT
          fi

          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "has-workflow-changes=true" >> $GITHUB_OUTPUT
            echo "Workflow changes detected:"
            echo "$WORKFLOW_CHANGES"
          else
            echo "has-workflow-changes=false" >> $GITHUB_OUTPUT
          fi

          # Determine if there are any meaningful changes
          if [ -n "$FRONTEND_CHANGES" ] || [ -n "$TERRAFORM_CHANGES" ] || \
             [ -n "$WORKFLOW_CHANGES" ]; then
            echo "has-meaningful-changes=true" >> $GITHUB_OUTPUT
            echo "✅ Meaningful changes detected - will proceed with build and deploy"
          else
            echo "has-meaningful-changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No meaningful changes detected - skipping build and deploy"
          fi

  no-changes-notification:
    name: No Meaningful Changes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-meaningful-changes == 'false'
    steps:
      - name: Log skip reason
        run: |
          echo "🔄 Workflow completed successfully with no meaningful changes to deploy."
          echo "This is the expected 'happy path' when changes don't affect:"
          echo "  - Frontend application (/frontend)"
          echo "  - Terraform infrastructure (/terraform)"
          echo "  - Deployment workflows (/.github/workflows)"

  manual-deploy-skip:
    name: Manual Deploy Skipped - No Changes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.has-meaningful-changes == 'false' &&
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Log manual deploy skip
        run: |
          echo "🚫 Manual deployment skipped - no meaningful changes detected."
          echo "No changes were found in:"
          echo "  - Frontend application (/frontend)"
          echo "  - Terraform infrastructure (/terraform)"
          echo "  - Deployment workflows (/.github/workflows)"
          echo ""
          echo "If you need to force a deployment, make a small change to trigger the build."

  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-meaningful-changes == 'true'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:run

      - name: Check formatting
        run: npm run format:check

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.has-meaningful-changes == 'true'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist
          retention-days: 30

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: >
      needs.detect-changes.outputs.has-meaningful-changes == 'true' &&
      (github.event_name == 'pull_request_target' || github.event_name == 'push')

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: frontend-build
          path: ./frontend/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan (Dev)
        working-directory: ./terraform
        run: terraform plan -var-file="env/dev.tfvars" -no-color

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: >
      needs.detect-changes.outputs.has-meaningful-changes == 'true' &&
      github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: frontend-build
          path: ./frontend/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Deploy to Development
        working-directory: ./terraform
        run: terraform apply -var-file="env/dev.tfvars" -auto-approve

      - name: Output URLs
        working-directory: ./terraform
        run: terraform output

  deploy-prod-plan:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: >
      needs.detect-changes.outputs.has-meaningful-changes == 'true' &&
      github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: frontend-build
          path: ./frontend/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan (Prod)
        working-directory: ./terraform
        run: terraform plan -var-file="env/prod.tfvars" -no-color

  deploy-prod-apply:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-prod-plan]
    if: >
      needs.detect-changes.outputs.has-meaningful-changes == 'true' &&
      github.event_name == 'workflow_dispatch'
    environment:
      name: production
      # Set required reviewers in repo settings for approval

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: frontend-build
          path: ./frontend/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Deploy to Production
        working-directory: ./terraform
        run: terraform apply -var-file="env/prod.tfvars" -auto-approve

      - name: Output URLs
        working-directory: ./terraform
        run: terraform output
